@using System.ComponentModel.DataAnnotations;
@using ScratchCard.File;
@using NPOI.Util;
@using AntDesign;
@using Minio;

@page "/card"
@rendermode InteractiveServer

<PageTitle>ScratchCard</PageTitle>

<div>
    <Flex Vertical Gap="small">
        <Flex>
            <Steps Current="@step" Class="site-navigation-steps">
                <Step Title="设置卡片" />
                <Step Title="设置奖品数量" />
                <Step Title="完成" />
            </Steps>
        </Flex>

        <Form Model="@card">
            @switch (step)
            {
                case 0:
                    {
                        <Flex Gap="middle" Align="center" Justify="center" Vertical>
                            <FormItem Label="刮刮卡的长度">
                                <AntDesign.InputNumber Value="@card.Length" DefaultValue="1" Min="1" ValueChanged="(int number)=>{card.Length = number;}" />
                            </FormItem>
                            <FormItem Label="刮刮卡的宽度">
                                <AntDesign.InputNumber Value="@card.Width" DefaultValue="1" Min="1" ValueChanged="(int number)=>{card.Width = number;}" />
                            </FormItem>
                            <FormItem Label="奖品种类数目">
                                <AntDesign.InputNumber Value="@awardTypeNumber" DefaultValue="1" Min="1" ValueChanged="(int number )=>AwardTypeNumberOnChange(number)" />
                            </FormItem>
                        </Flex>
                        break;
                    }
                case 1:
                    {
                        <FormItem>
                            <Table DataSource="@card.Awards" TItem="Model.Award" Context="row" HidePagination Bordered>
                                <PropertyColumn Property="c=>c.Name" Width="50%">
                                    <FormItem Required>
                                        <Input Value="@row.Name" ValueChanged="(string name)=>{row.Name = name;}" />
                                    </FormItem>
                                </PropertyColumn>

                                <PropertyColumn Property="c=>c.Number" Width="50%">
                                    <FormItem Required>
                                        <Input Value="@row.Number" Type="int" ValueChanged="(int number)=>{row.Number = number;}" />
                                    </FormItem>
                                </PropertyColumn>
                            </Table>
                        </FormItem>
                        break;
                    }
            }
        </Form>
        @if (step < 2)
        {
            <Flex Align="center" Justify="center">
                <Space Align="@SpaceAlign.Center" Size="@SpaceSize.Large">
                    <SpaceItem>
                        <Button Type="@ButtonType.Default"
                                OnClick="PrevStep">
                            PrevStep
                        </Button>
                    </SpaceItem>
                    <SpaceItem>
                        <Button Type="@ButtonType.Primary"
                                OnClick="NextStep">
                            NextStep
                        </Button>
                    </SpaceItem>
                </Space>
            </Flex>
        }
        else
        {
            <Result Status="success"
                    Title="成功生成刮刮卡！">
                <Extra>
                    <Button Type="primary" Icon="cloud-download" OnClick="DownLoadFile">点击下载Excel文件</Button>
                </Extra>
            </Result>
        }
    </Flex>
</div>



@code {
    @inject IMinioClient minioClient;
    //当前步骤
    private int step = 0;

    //奖品种类数目
    private int awardTypeNumber = 0;

    private Model.Card card = new Model.Card();

    //下一步
    private void NextStep()
    {
        step++;
        if (step == 2)
        {
            //本地生成文件
            ByteArrayOutputStream wb = FileUtil.GenerateExcelFile(card);
            //文件上传minio
            minioClient.Build();

        }
    }

    //上一步
    private void PrevStep()
    {
        step = step - 1 < 0 ? 0 : step - 1;
    }

    //设置奖品种类
    private void AwardTypeNumberOnChange(int number)
    {
        card.Awards.Clear();

        for (int i = 0; i < number; i++)
        {
            Model.Award award = new Award();
            award.Length = card.Length;
            award.Width = card.Width;

            card.Awards.Add(award);
        }

        awardTypeNumber = number;
    }

    private async Task UploadFile()
    {
        string filePath = FileUtil.GetFilePath();

        // MinioUtil minioUtil = new MinioUtil();
        // await minioUtil.UploadFile(Guid.NewGuid().ToString(), filePath);
    }

    private async Task DownLoadFile()
    {

    }
}
